// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC20Recovered extends ethereum.Event {
  get params(): ERC20Recovered__Params {
    return new ERC20Recovered__Params(this);
  }
}

export class ERC20Recovered__Params {
  _event: ERC20Recovered;

  constructor(event: ERC20Recovered) {
    this._event = event;
  }

  get requestedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ERC721Recovered extends ethereum.Event {
  get params(): ERC721Recovered__Params {
    return new ERC721Recovered__Params(this);
  }
}

export class ERC721Recovered__Params {
  _event: ERC721Recovered;

  constructor(event: ERC721Recovered) {
    this._event = event;
  }

  get requestedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ETHReceived extends ethereum.Event {
  get params(): ETHReceived__Params {
    return new ETHReceived__Params(this);
  }
}

export class ETHReceived__Params {
  _event: ETHReceived;

  constructor(event: ETHReceived) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  LIDO(): Address {
    let result = super.call("LIDO", "LIDO():(address)", []);

    return result[0].toAddress();
  }

  try_LIDO(): ethereum.CallResult<Address> {
    let result = super.tryCall("LIDO", "LIDO():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TREASURY(): Address {
    let result = super.call("TREASURY", "TREASURY():(address)", []);

    return result[0].toAddress();
  }

  try_TREASURY(): ethereum.CallResult<Address> {
    let result = super.tryCall("TREASURY", "TREASURY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawRewards(_maxAmount: BigInt): BigInt {
    let result = super.call(
      "withdrawRewards",
      "withdrawRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_maxAmount)]
    );

    return result[0].toBigInt();
  }

  try_withdrawRewards(_maxAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawRewards",
      "withdrawRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_maxAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _lido(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RecoverERC721Call extends ethereum.Call {
  get inputs(): RecoverERC721Call__Inputs {
    return new RecoverERC721Call__Inputs(this);
  }

  get outputs(): RecoverERC721Call__Outputs {
    return new RecoverERC721Call__Outputs(this);
  }
}

export class RecoverERC721Call__Inputs {
  _call: RecoverERC721Call;

  constructor(call: RecoverERC721Call) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC721Call__Outputs {
  _call: RecoverERC721Call;

  constructor(call: RecoverERC721Call) {
    this._call = call;
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
